(()=>{var __webpack_modules__={993:()=>{eval("{// client/src/app.js\n// Complete Planning Poker Frontend - No Duplicate Functions\n// Directory: planning-poker-serverless/client/src/app.js\n\n// Global game state\nvar gameState = {\n  socket: null,\n  isConnected: false,\n  sessionState: {\n    players: {},\n    votesRevealed: false,\n    hasConsensus: false\n  },\n  isSpectator: false,\n  playerName: '',\n  sessionCode: '',\n  currentVote: null\n};\n// Debug helper functions (add these to your global scope)\nwindow.debugApp = function () {\n  debugCurrentState();\n};\nwindow.testAuth = function () {\n  console.log('üß™ Testing authentication...');\n  forceShowPasswordInterface();\n};\nwindow.testSuccess = function () {\n  showSuccess('Test success message!');\n};\nwindow.testError = function () {\n  showError('Test error message!');\n};\nwindow.validateElements = function () {\n  return validateRequiredElements();\n};\n// Updated initialization to ensure proper flow\nfunction initializeAuthentication() {\n  console.log('üîÑ Initializing authentication flow...');\n\n  // Always start with authentication check\n  checkAuthentication();\n\n  // Add some debugging after a short delay\n  setTimeout(function () {\n    var passwordSection = document.getElementById('passwordSection');\n    var gameSection = document.getElementById('gameSection');\n    if (passwordSection) {\n      var passwordDisplay = window.getComputedStyle(passwordSection).display;\n      console.log('üîç Password section display:', passwordDisplay);\n    } else {\n      console.error('‚ùå Password section not found!');\n    }\n    if (gameSection) {\n      var gameDisplay = window.getComputedStyle(gameSection).display;\n      console.log('üîç Game section display:', gameDisplay);\n    } else {\n      console.error('‚ùå Game section not found!');\n    }\n  }, 100);\n}\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('üéØ Planning Poker app starting...');\n\n  // Use safe initialization to prevent errors\n  try {\n    safeInitialize();\n  } catch (error) {\n    console.error('‚ùå Critical initialization error:', error);\n\n    // Show error on page\n    var body = document.body;\n    if (body) {\n      var errorDiv = document.createElement('div');\n      errorDiv.innerHTML = \"\\n                <div style=\\\"background: #f44336; color: white; padding: 20px; margin: 20px; border-radius: 8px;\\\">\\n                    <h3>\\u26A0\\uFE0F App Initialization Error</h3>\\n                    <p><strong>Error:</strong> \".concat(error.message, \"</p>\\n                    <p><strong>Solution:</strong> Please refresh the page or check the console for details.</p>\\n                    <button onclick=\\\"location.reload()\\\" style=\\\"background: white; color: #f44336; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px;\\\">\\n                        \\uD83D\\uDD04 Refresh Page\\n                    </button>\\n                </div>\\n            \");\n      body.insertBefore(errorDiv, body.firstChild);\n    }\n  }\n});\n\n// Setup event listeners\nfunction setupEventListeners() {\n  console.log('üîß Setting up event listeners...');\n\n  // Team password button\n  var teamPasswordBtn = document.getElementById('teamPasswordBtn');\n  if (teamPasswordBtn) {\n    teamPasswordBtn.addEventListener('click', handlePasswordAuth);\n    console.log('‚úÖ Password button listener added');\n  } else {\n    console.warn('‚ö†Ô∏è Password button not found');\n  }\n\n  // Password input enter key\n  var teamPasswordInput = document.getElementById('teamPassword');\n  if (teamPasswordInput) {\n    teamPasswordInput.addEventListener('keypress', function (e) {\n      if (e.key === 'Enter') {\n        handlePasswordAuth();\n      }\n    });\n    console.log('‚úÖ Password input enter key listener added');\n  }\n\n  // Join button\n  var joinButton = document.getElementById('joinButton');\n  if (joinButton) {\n    joinButton.addEventListener('click', joinSession);\n    console.log('‚úÖ Join button listener added');\n  } else {\n    console.warn('‚ö†Ô∏è Join button not found');\n  }\n\n  // Reset buttons\n  var resetButton = document.getElementById('resetButton');\n  if (resetButton) {\n    resetButton.addEventListener('click', resetVotes);\n    console.log('‚úÖ Reset button listener added');\n  }\n  var resetButtonSpectator = document.getElementById('resetButtonSpectator');\n  if (resetButtonSpectator) {\n    resetButtonSpectator.addEventListener('click', resetVotes);\n    console.log('‚úÖ Spectator reset button listener added');\n  }\n\n  // Voting cards\n  var fibonacciCards = document.querySelectorAll('.fibonacci-card');\n  if (fibonacciCards.length > 0) {\n    for (var i = 0; i < fibonacciCards.length; i++) {\n      fibonacciCards[i].addEventListener('click', function () {\n        var value = parseInt(this.dataset.value);\n        castVote(value);\n      });\n    }\n    console.log('‚úÖ Voting card listeners added (' + fibonacciCards.length + ' cards)');\n  } else {\n    console.warn('‚ö†Ô∏è No voting cards found');\n  }\n\n  // Share link copy functionality\n  var shareLink = document.getElementById('shareLink');\n  if (shareLink) {\n    shareLink.addEventListener('click', copyShareLink);\n    console.log('‚úÖ Share link listener added');\n  } else {\n    console.warn('‚ö†Ô∏è Share link button not found');\n  }\n\n  // Enter key to join\n  var playerNameInput = document.getElementById('playerName');\n  if (playerNameInput) {\n    playerNameInput.addEventListener('keypress', function (e) {\n      if (e.key === 'Enter') {\n        joinSession();\n      }\n    });\n    console.log('‚úÖ Player name enter key listener added');\n  }\n  console.log('üéØ Event listeners setup complete');\n}\n// Global error handler to catch any missed errors\nwindow.addEventListener('error', function (event) {\n  console.error('üö® Global error caught:', event.error);\n  console.error('  - Message:', event.message);\n  console.error('  - Filename:', event.filename);\n  console.error('  - Line:', event.lineno);\n  console.error('  - Column:', event.colno);\n\n  // Try to show error message to user\n  try {\n    showError('An unexpected error occurred. Please refresh the page.');\n  } catch (e) {\n    console.error('‚ùå Could not show error message:', e);\n  }\n});\n// Authentication functions\nfunction checkAuthentication() {\n  console.log('üîê Checking authentication...');\n\n  // FORCE PRODUCTION BEHAVIOR (for testing)\n  // Comment out the localhost bypass to test password authentication\n  var isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n\n  // UNCOMMENT THIS LINE TO TEST PRODUCTION BEHAVIOR:\n  var forceProductionAuth = true; // Set to true to test password auth\n\n  if (isLocalhost && !forceProductionAuth) {\n    console.log('üè† Local development - skipping password auth');\n    showGameInterface();\n    return;\n  }\n\n  // For production (or forced production testing), always require password\n  var authenticated = localStorage.getItem('planning-poker-authenticated');\n  if (authenticated === 'true') {\n    console.log('‚úÖ User is authenticated from localStorage');\n    showGameInterface();\n  } else {\n    console.log('üîí User needs to authenticate - showing password interface');\n    showPasswordInterface();\n  }\n}\n// Enhanced error handling for missing elements\nfunction validateRequiredElements() {\n  console.log('üîç Validating required HTML elements...');\n  var requiredElements = ['passwordSection', 'gameSection', 'teamPassword', 'teamPasswordBtn', 'joinForm', 'sessionInterface', 'playerName', 'joinButton', 'shareLink', 'loading', 'error', 'connectionStatus'];\n  var missingElements = [];\n  requiredElements.forEach(function (id) {\n    var element = document.getElementById(id);\n    if (!element) {\n      missingElements.push(id);\n    }\n  });\n  if (missingElements.length > 0) {\n    console.error('‚ùå Missing required elements:', missingElements);\n    return false;\n  } else {\n    console.log('‚úÖ All required elements found');\n    return true;\n  }\n}\nfunction handlePasswordAuth() {\n  console.log('üîë Handling password authentication...');\n  var passwordInput = document.getElementById('teamPassword');\n  if (!passwordInput) {\n    console.error('‚ùå Password input not found');\n    showError('Password input not found');\n    return;\n  }\n  var password = passwordInput.value.trim();\n\n  // Validate password\n  if (password.length === 0) {\n    showError('Please enter a password');\n    return;\n  }\n\n  // For demo purposes, accept any non-empty password\n  // In production, you would validate against a real password\n  console.log('üîç Validating password...');\n\n  // Simulate password validation\n  if (password.length > 0) {\n    // Store authentication state\n    localStorage.setItem('planning-poker-authenticated', 'true');\n    console.log('‚úÖ Password authentication successful');\n\n    // Clear any error messages\n    hideError();\n\n    // Show success message briefly\n    showSuccess('Authentication successful!');\n\n    // Transition to game interface\n    setTimeout(function () {\n      showGameInterface();\n    }, 500);\n  } else {\n    console.log('‚ùå Invalid password');\n    showError('Invalid password. Please try again.');\n  }\n}\n// Initialize everything safely\nfunction safeInitialize() {\n  console.log('üîí Safe initialization starting...');\n  try {\n    // Validate elements first\n    if (!validateRequiredElements()) {\n      console.error('‚ùå Required elements missing - check your HTML');\n      return;\n    }\n\n    // Setup event listeners\n    setupEventListeners();\n\n    // Initialize authentication\n    initializeAuthentication();\n\n    // Connect to server\n    connectToServer();\n\n    // Handle URL parameters\n    var urlParams = new URLSearchParams(window.location.search);\n    var sessionCode = urlParams.get('session');\n    if (sessionCode) {\n      var sessionInput = document.getElementById('sessionCode');\n      if (sessionInput) {\n        sessionInput.value = sessionCode;\n        console.log('üîó Session code from URL:', sessionCode);\n      }\n    }\n    console.log('‚úÖ Safe initialization complete');\n  } catch (error) {\n    console.error('‚ùå Initialization error:', error);\n    showError('App initialization failed: ' + error.message);\n  }\n}\nfunction showPasswordInterface() {\n  console.log('üîí Showing password interface');\n  var passwordSection = document.getElementById('passwordSection');\n  var gameSection = document.getElementById('gameSection');\n  if (passwordSection) {\n    passwordSection.style.display = 'block';\n    console.log('‚úÖ Password section shown');\n  } else {\n    console.error('‚ùå Password section element not found!');\n  }\n  if (gameSection) {\n    gameSection.style.display = 'none';\n    console.log('‚úÖ Game section hidden');\n  }\n}\nfunction showGameInterface() {\n  console.log('üéÆ Showing game interface');\n  var passwordSection = document.getElementById('passwordSection');\n  var gameSection = document.getElementById('gameSection');\n  if (passwordSection) {\n    passwordSection.style.display = 'none';\n    console.log('‚úÖ Password section hidden');\n  }\n  if (gameSection) {\n    gameSection.style.display = 'block';\n    console.log('‚úÖ Game section shown');\n  } else {\n    console.error('‚ùå Game section element not found!');\n  }\n\n  // Make sure join form is visible initially\n  var joinForm = document.getElementById('joinForm');\n  if (joinForm) {\n    joinForm.style.display = 'block';\n    console.log('‚úÖ Join form shown');\n  }\n}\n\n// Connection functions\nfunction connectToServer() {\n  console.log('üîå Connecting to server...');\n  var isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n  var serverUrl;\n  if (isLocal) {\n    serverUrl = 'http://localhost:3001';\n    console.log('üè† Using local development server:', serverUrl);\n  } else {\n    serverUrl = \"https://eo6hf7a1wj.execute-api.us-east-1.amazonaws.com/prod\";\n    console.log('‚òÅÔ∏è Using production server:', serverUrl);\n  }\n\n  // Initialize Socket.IO connection\n  gameState.socket = io(serverUrl, {\n    transports: ['websocket', 'polling'],\n    timeout: 10000,\n    reconnection: true,\n    reconnectionDelay: 1000,\n    reconnectionDelayMax: 5000,\n    maxReconnectionAttempts: 5\n  });\n  setupSocketEventHandlers();\n}\nfunction setupSocketEventHandlers() {\n  console.log('üì° Setting up socket event handlers...');\n  gameState.socket.on('connect', function () {\n    console.log('‚úÖ Connected to backend server');\n    gameState.isConnected = true;\n    hideError();\n    hideLoading();\n    updateConnectionStatus('Connected to server');\n  });\n  gameState.socket.on('disconnect', function (reason) {\n    console.log('‚ùå Disconnected from server:', reason);\n    gameState.isConnected = false;\n    showLoading('Connection lost. Reconnecting...');\n    updateConnectionStatus('Disconnected - ' + reason);\n  });\n  gameState.socket.on('connect_error', function (error) {\n    console.error('üî• Connection error:', error);\n    showError('Unable to connect to server. Please check your connection.');\n    updateConnectionStatus('Connection failed');\n  });\n  gameState.socket.on('joinedSession', function (data) {\n    console.log('üéâ Successfully joined session:', data);\n    gameState.sessionCode = data.sessionCode;\n    gameState.playerName = data.playerName;\n    gameState.isSpectator = data.isSpectator;\n    hideLoading();\n    hideError();\n    showSessionInterface(data);\n  });\n  gameState.socket.on('sessionUpdate', function (data) {\n    console.log('üìä Session update received:', data);\n    updateSessionInterface(data);\n  });\n  gameState.socket.on('voteSubmitted', function (data) {\n    console.log('üó≥Ô∏è Vote submitted:', data);\n    gameState.currentVote = data.vote;\n    updateVotingInterface(data);\n  });\n  gameState.socket.on('votesReset', function () {\n    console.log('üîÑ Votes have been reset');\n    gameState.currentVote = null;\n    resetVotingInterface();\n  });\n  gameState.socket.on('error', function (data) {\n    console.error('‚ö†Ô∏è Server error:', data);\n    showError(data.message || 'An error occurred');\n  });\n}\n\n// Game functions\nfunction joinSession() {\n  console.log('üéØ Attempting to join session...');\n  var playerNameInput = document.getElementById('playerName');\n  var sessionCodeInput = document.getElementById('sessionCode');\n  var isSpectatorInput = document.getElementById('isSpectator');\n  if (!playerNameInput) {\n    showError('Player name input not found');\n    return;\n  }\n  var playerName = playerNameInput.value.trim();\n  var sessionCode = sessionCodeInput ? sessionCodeInput.value.trim().toUpperCase() : '';\n  var isSpectator = isSpectatorInput ? isSpectatorInput.checked : false;\n\n  // Validation\n  if (!playerName) {\n    showError('Please enter your name');\n    return;\n  }\n  if (playerName.length > 20) {\n    showError('Name must be 20 characters or less');\n    return;\n  }\n  if (!gameState.isConnected) {\n    showError('Not connected to server. Please wait...');\n    return;\n  }\n  showLoading('Joining session...');\n  hideError();\n\n  // Send join request to server\n  gameState.socket.emit('joinSession', {\n    sessionCode: sessionCode,\n    playerName: playerName,\n    isSpectator: isSpectator\n  });\n}\nfunction castVote(voteValue) {\n  console.log('üó≥Ô∏è Casting vote:', voteValue);\n  if (!gameState.isConnected) {\n    showError('Not connected to server');\n    return;\n  }\n  if (gameState.isSpectator) {\n    showError('Spectators cannot vote');\n    return;\n  }\n  gameState.socket.emit('castVote', {\n    vote: voteValue\n  });\n}\nfunction resetVotes() {\n  console.log('üîÑ Requesting vote reset...');\n  if (!gameState.isConnected) {\n    showError('Not connected to server');\n    return;\n  }\n  if (!gameState.isSpectator) {\n    showError('Only spectators can reset votes');\n    return;\n  }\n  gameState.socket.emit('resetVotes', {});\n}\n\n// UI functions\nfunction showLoading(message) {\n  console.log('‚è≥ Loading:', message);\n  var loadingElement = document.getElementById('loading');\n  var errorElement = document.getElementById('error');\n  if (loadingElement) {\n    loadingElement.textContent = message || 'Loading...';\n    loadingElement.style.display = 'block';\n  }\n  if (errorElement) {\n    errorElement.style.display = 'none';\n  }\n}\nfunction hideLoading() {\n  console.log('‚úÖ Hiding loading indicator');\n  var loadingElement = document.getElementById('loading');\n  if (loadingElement) {\n    loadingElement.style.display = 'none';\n  }\n}\nfunction showError(message) {\n  console.error('‚ùå Error:', message);\n  var errorElement = document.getElementById('error');\n  var loadingElement = document.getElementById('loading');\n  if (errorElement) {\n    errorElement.textContent = message || 'An error occurred';\n    errorElement.style.display = 'block';\n  }\n  if (loadingElement) {\n    loadingElement.style.display = 'none';\n  }\n}\nfunction hideError() {\n  console.log('‚úÖ Hiding error message');\n  var errorElement = document.getElementById('error');\n  if (errorElement) {\n    errorElement.style.display = 'none';\n  }\n}\nfunction updateConnectionStatus(status) {\n  console.log('üì° Connection status:', status);\n  var statusElement = document.getElementById('connectionStatus');\n  if (statusElement) {\n    statusElement.textContent = status;\n\n    // Update styling based on connection state\n    if (status.includes('Connected')) {\n      statusElement.className = 'status-connected';\n    } else if (status.includes('Disconnected')) {\n      statusElement.className = 'status-disconnected';\n    } else {\n      statusElement.className = 'status-connecting';\n    }\n  }\n}\nfunction showSessionInterface(data) {\n  console.log('üéÆ Showing session interface for:', data.isSpectator ? 'Spectator' : 'Voter');\n  console.log('üìä Session data:', data);\n\n  // Hide join form\n  var joinForm = document.getElementById('joinForm');\n  if (joinForm) {\n    joinForm.style.display = 'none';\n    console.log('‚úÖ Join form hidden');\n  }\n\n  // Show session interface\n  var sessionInterface = document.getElementById('sessionInterface');\n  if (sessionInterface) {\n    sessionInterface.style.display = 'block';\n    console.log('‚úÖ Session interface shown');\n  } else {\n    console.error('‚ùå Session interface element not found!');\n  }\n\n  // Update session info\n  var sessionCodeElement = document.getElementById('currentSessionCode');\n  var playerNameElement = document.getElementById('currentPlayerName');\n  if (sessionCodeElement) {\n    sessionCodeElement.textContent = data.sessionCode;\n    console.log('‚úÖ Session code updated:', data.sessionCode);\n  }\n  if (playerNameElement) {\n    var displayName = data.playerName + (data.isSpectator ? ' (Spectator)' : ' (Voter)');\n    playerNameElement.textContent = displayName;\n    console.log('‚úÖ Player name updated:', displayName);\n  }\n\n  // Configure interface based on role\n  configureRoleBasedInterface(data.isSpectator);\n  console.log('üéØ Session interface setup complete!');\n}\n// Configure interface based on role\nfunction configureRoleBasedInterface(isSpectator) {\n  console.log('üîß Configuring interface for:', isSpectator ? 'Spectator' : 'Voter');\n  var votingCards = document.getElementById('votingCards');\n  var resetButton = document.getElementById('resetButton');\n  var resetButtonSpectator = document.getElementById('resetButtonSpectator');\n  if (isSpectator) {\n    console.log('üëÄ Setting up SPECTATOR interface...');\n\n    // HIDE voting cards for Spectators\n    if (votingCards) {\n      votingCards.style.display = 'none';\n      console.log('‚úÖ Voting cards HIDDEN for spectator');\n    }\n\n    // SHOW spectator reset button\n    if (resetButtonSpectator) {\n      resetButtonSpectator.style.display = 'inline-block';\n      console.log('‚úÖ Spectator reset button SHOWN');\n    }\n\n    // HIDE voter reset button\n    if (resetButton) {\n      resetButton.style.display = 'none';\n      console.log('‚úÖ Voter reset button HIDDEN');\n    }\n  } else {\n    console.log('üó≥Ô∏è Setting up VOTER interface...');\n\n    // SHOW voting cards for Voters\n    if (votingCards) {\n      votingCards.style.display = 'block';\n      votingCards.style.opacity = '1';\n      votingCards.style.pointerEvents = 'auto';\n      console.log('‚úÖ Voting cards SHOWN for voter');\n    }\n\n    // HIDE both reset buttons for Voters\n    if (resetButton) {\n      resetButton.style.display = 'none';\n      console.log('‚úÖ Voter reset button HIDDEN');\n    }\n    if (resetButtonSpectator) {\n      resetButtonSpectator.style.display = 'none';\n      console.log('‚úÖ Spectator reset button HIDDEN');\n    }\n  }\n}\nfunction updateSessionInterface(data) {\n  console.log('üìä Updating session interface:', data);\n  if (data.state) {\n    gameState.sessionState = data.state;\n    updatePlayersDisplay(data.state.players);\n    updateVotingDisplay(data.state.votesRevealed, data.state.hasConsensus);\n  }\n}\nfunction updatePlayersDisplay(players) {\n  var playersListElement = document.getElementById('playersList');\n  if (!playersListElement) return;\n  var html = '';\n  for (var playerName in players) {\n    if (players.hasOwnProperty(playerName)) {\n      var player = players[playerName];\n      var status = player.isSpectator ? 'Spectator' : player.hasVoted ? '‚úì Voted' : '‚è≥ Waiting';\n      var vote = player.vote && gameState.sessionState.votesRevealed ? ' - Vote: ' + player.vote : '';\n      html += '<div class=\"player-item\">' + playerName + ' (' + status + ')' + vote + '</div>';\n    }\n  }\n  playersListElement.innerHTML = html;\n}\nfunction updateVotingDisplay(votesRevealed, hasConsensus) {\n  var votingCards = document.querySelectorAll('.fibonacci-card');\n\n  // Update card selection state\n  for (var i = 0; i < votingCards.length; i++) {\n    var card = votingCards[i];\n    var cardValue = parseInt(card.dataset.value);\n    if (cardValue === gameState.currentVote) {\n      card.classList.add('selected');\n    } else {\n      card.classList.remove('selected');\n    }\n  }\n\n  // Show consensus message if reached\n  if (hasConsensus) {\n    showSuccess('üéØ Consensus reached!');\n  }\n}\nfunction updateVotingInterface(data) {\n  gameState.currentVote = data.vote;\n  updateVotingDisplay(gameState.sessionState.votesRevealed, gameState.sessionState.hasConsensus);\n}\nfunction resetVotingInterface() {\n  gameState.currentVote = null;\n  var votingCards = document.querySelectorAll('.fibonacci-card');\n  for (var i = 0; i < votingCards.length; i++) {\n    votingCards[i].classList.remove('selected');\n  }\n}\nfunction copyShareLink() {\n  console.log('üìã Copying share link...');\n  if (!gameState.sessionCode) {\n    showError('No active session to share');\n    return;\n  }\n  var shareUrl = window.location.origin + window.location.pathname + '?session=' + gameState.sessionCode;\n  console.log('üîó Share URL:', shareUrl);\n  if (navigator.clipboard && navigator.clipboard.writeText) {\n    navigator.clipboard.writeText(shareUrl).then(function () {\n      showSuccess('Share link copied to clipboard!');\n    })[\"catch\"](function (err) {\n      console.error('Failed to copy link:', err);\n      fallbackCopyShareLink(shareUrl);\n    });\n  } else {\n    fallbackCopyShareLink(shareUrl);\n  }\n}\n// Fallback copy function for older browsers\nfunction fallbackCopyShareLink(shareUrl) {\n  console.log('üìã Using fallback copy method...');\n\n  // Create temporary input element\n  var tempInput = document.createElement('input');\n  tempInput.value = shareUrl;\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-9999px';\n  document.body.appendChild(tempInput);\n  try {\n    tempInput.select();\n    tempInput.setSelectionRange(0, 99999); // For mobile devices\n    var success = document.execCommand('copy');\n    if (success) {\n      showSuccess('Share link copied to clipboard!');\n    } else {\n      showError('Please copy this link manually: ' + shareUrl);\n    }\n  } catch (err) {\n    console.error('Fallback copy failed:', err);\n    showError('Please copy this link manually: ' + shareUrl);\n  } finally {\n    document.body.removeChild(tempInput);\n  }\n}\nfunction showSuccess(message) {\n  console.log('‚úÖ Success:', message);\n  var errorElement = document.getElementById('error');\n  if (errorElement) {\n    errorElement.textContent = message;\n    errorElement.style.display = 'block';\n    errorElement.className = 'success-message'; // Use CSS class from HTML\n\n    // Hide after 3 seconds\n    setTimeout(function () {\n      errorElement.style.display = 'none';\n      errorElement.className = ''; // Reset class\n    }, 3000);\n  } else {\n    // Fallback: create a temporary success message\n    var successDiv = document.createElement('div');\n    successDiv.textContent = message;\n    successDiv.style.cssText = 'background: #4CAF50; color: white; padding: 10px; margin: 10px 0; border-radius: 4px;';\n    document.body.insertBefore(successDiv, document.body.firstChild);\n    setTimeout(function () {\n      if (successDiv.parentNode) {\n        successDiv.parentNode.removeChild(successDiv);\n      }\n    }, 3000);\n  }\n}\n\n// Helper functions\nfunction getSessionState(session) {\n  console.log('üìä Getting session state:', session);\n  if (!session) {\n    return {\n      players: {},\n      votesRevealed: false,\n      hasConsensus: false\n    };\n  }\n  return {\n    players: session.players || {},\n    votesRevealed: session.votesRevealed || false,\n    hasConsensus: checkConsensus(session)\n  };\n}\nfunction checkConsensus(session) {\n  if (!session || !session.players || !session.votesRevealed) {\n    return false;\n  }\n  var votes = [];\n  var players = session.players;\n\n  // Collect all votes from non-spectator players\n  for (var playerName in players) {\n    if (players.hasOwnProperty(playerName)) {\n      var player = players[playerName];\n      if (!player.isSpectator && player.hasVoted && player.vote !== null) {\n        votes.push(player.vote);\n      }\n    }\n  }\n\n  // Need at least 2 votes for consensus\n  if (votes.length < 2) {\n    return false;\n  }\n\n  // Check if all votes are the same\n  var firstVote = votes[0];\n  for (var i = 1; i < votes.length; i++) {\n    if (votes[i] !== firstVote) {\n      return false;\n    }\n  }\n  console.log('üéØ Consensus reached! All votes are:', firstVote);\n  return true;\n}\n// Debug function to check current state\nfunction debugCurrentState() {\n  console.log('üîç Current App State Debug:');\n  console.log('  - gameState:', gameState);\n  console.log('  - isConnected:', gameState.isConnected);\n  console.log('  - sessionCode:', gameState.sessionCode);\n  console.log('  - playerName:', gameState.playerName);\n  console.log('  - isSpectator:', gameState.isSpectator);\n  console.log('  - currentVote:', gameState.currentVote);\n\n  // Check authentication\n  var authState = localStorage.getItem('planning-poker-authenticated');\n  console.log('  - authState:', authState);\n\n  // Check element visibility\n  var passwordSection = document.getElementById('passwordSection');\n  var gameSection = document.getElementById('gameSection');\n  if (passwordSection) {\n    console.log('  - passwordSection display:', window.getComputedStyle(passwordSection).display);\n  }\n  if (gameSection) {\n    console.log('  - gameSection display:', window.getComputedStyle(gameSection).display);\n  }\n}\n// Enhanced debugging function\nfunction debugInterfaceState() {\n  console.log('üîç Interface Debug State:');\n  var elements = ['passwordSection', 'gameSection', 'joinForm', 'sessionInterface', 'votingCards', 'playersSection', 'controls'];\n  elements.forEach(function (id) {\n    var element = document.getElementById(id);\n    if (element) {\n      var display = window.getComputedStyle(element).display;\n      console.log('  ' + id + ': ' + display + ' (exists)');\n    } else {\n      console.log('  ' + id + ': MISSING ELEMENT');\n    }\n  });\n}\n// Helper function to force show password interface (for testing)\nfunction forceShowPasswordInterface() {\n  console.log('üö® Force showing password interface for testing...');\n\n  // Clear authentication\n  localStorage.removeItem('planning-poker-authenticated');\n\n  // Show password interface\n  showPasswordInterface();\n}\n// Helper function to debug role configuration\nfunction debugRoleInterface() {\n  console.log('üîç Role Interface Debug:');\n  var elements = {\n    'votingCards': document.getElementById('votingCards'),\n    'resetButton': document.getElementById('resetButton'),\n    'resetButtonSpectator': document.getElementById('resetButtonSpectator')\n  };\n  Object.keys(elements).forEach(function (key) {\n    var element = elements[key];\n    if (element) {\n      var display = window.getComputedStyle(element).display;\n      console.log('  ' + key + ': ' + display);\n    } else {\n      console.log('  ' + key + ': MISSING');\n    }\n  });\n}\n// Call this after authentication to check what's happening\nfunction checkInterfaceAfterAuth() {\n  console.log('üîß Checking interface after authentication...');\n  setTimeout(function () {\n    debugInterfaceState();\n\n    // Force show game interface if it's hidden\n    var gameSection = document.getElementById('gameSection');\n    if (gameSection && window.getComputedStyle(gameSection).display === 'none') {\n      console.log('üö® Game section is hidden! Forcing it to show...');\n      gameSection.style.display = 'block';\n    }\n    var joinForm = document.getElementById('joinForm');\n    if (joinForm && window.getComputedStyle(joinForm).display === 'none') {\n      console.log('üö® Join form is hidden! Forcing it to show...');\n      joinForm.style.display = 'block';\n    }\n  }, 100);\n}\nfunction testRoleInterface() {\n  console.log('üß™ Testing role-based interface...');\n\n  // Test Spectator\n  console.log('Testing Spectator role...');\n  configureRoleBasedInterface(true);\n  setTimeout(function () {\n    debugRoleInterface();\n\n    // Test Voter\n    console.log('Testing Voter role...');\n    configureRoleBasedInterface(false);\n    setTimeout(function () {\n      debugRoleInterface();\n    }, 1000);\n  }, 1000);\n}\n// TESTING FUNCTIONS - Add these to test authentication scenarios:\n\n// Test fresh user experience (no stored auth)\nfunction testFreshUser() {\n  console.log('üß™ Testing fresh user experience...');\n  localStorage.removeItem('planning-poker-authenticated');\n  checkAuthentication();\n}\n\n// Test returning user experience (stored auth)\nfunction testReturningUser() {\n  console.log('üß™ Testing returning user experience...');\n  localStorage.setItem('planning-poker-authenticated', 'true');\n  checkAuthentication();\n}\n\n// Test shared link experience\nfunction testSharedLink(sessionCode) {\n  console.log('üß™ Testing shared link experience...');\n  // Simulate clicking a shared link\n  var url = new URL(window.location);\n  url.searchParams.set('session', sessionCode || 'TEST123');\n  window.history.pushState({}, '', url);\n\n  // Clear auth to simulate new user\n  localStorage.removeItem('planning-poker-authenticated');\n  location.reload();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///993\n\n}")}},__webpack_exports__={};__webpack_modules__[993]()})();