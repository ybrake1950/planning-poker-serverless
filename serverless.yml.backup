service: planning-poker-serverless

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  
  environment:
    NODE_ENV: production
    CORS_ORIGIN: https://team2playscards.com
    SESSIONS_TABLE: ${self:service}-sessions-${self:provider.stage}
    CONNECTIONS_TABLE: ${self:service}-connections-${self:provider.stage}
    FRONTEND_URL: https://team2playscards.com
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSIONS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}"
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"

  httpApi:
    cors:
      allowedOrigins:
        - https://team2playscards.com
        - http://localhost:8080
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS

functions:
  # WebSocket connection handlers
  websocketConnect:
    handler: serverless/websocket.connect
    events:
      - websocket: $connect
      
  websocketDisconnect:
    handler: serverless/websocket.disconnect  
    events:
      - websocket: $disconnect
      
  # Game logic handlers
  joinSession:
    handler: serverless/game.joinSession
    events:
      - websocket:
          route: joinSession
          
  castVote:
    handler: serverless/game.castVote
    events:
      - websocket:
          route: castVote
          
  resetVotes:
    handler: serverless/game.resetVotes
    events:
      - websocket:
          route: resetVotes

  # HTTP API handlers
  createSession:
    handler: serverless/api.createSession
    events:
      - httpApi:
          path: /api/sessions
          method: post

  getSession:
    handler: serverless/api.getSession
    events:
      - httpApi:
          path: /api/sessions/{code}
          method: get

  healthCheck:
    handler: serverless/api.healthCheck
    events:
      - httpApi:
          path: /api/health
          method: get

  frontend:
    handler: serverless/frontend.handler
    timeout: 30
    memorySize: 256
    events:
      - httpApi:
          path: /
          method: get
      - httpApi:
          path: /{proxy+}
          method: get
  # HTTP API handlers  
  createSession:
    handler: serverless/api.createSession
    events:
      - httpApi:
          path: /api/sessions
          method: post
          
  getSession:
    handler: serverless/api.getSession
    events:
      - httpApi:
          path: /api/sessions/{code}
          method: get
      - httpApi:
          path: /{proxy+}
          method: get

      - httpApi:
          path: /{proxy+}
          method: get          
      - httpApi:
          path: /{proxy+}
          method: get
  Resources:
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SESSIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: sessionCode
            AttributeType: S
        KeySchema:
          - AttributeName: sessionCode
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
          
    ConnectionsTable:
      Type: AWS::DynamoDB::Table  
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: sessionCode
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SessionIndex
            KeySchema:
              - AttributeName: sessionCode
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true

package:
  individually: false
  exclude:
    - client/node_modules/**
    - client/src/**
    - tests/**
    - .git/**
    - README.md

