service: planning-poker-serverless

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  
  environment:
    SESSIONS_TABLE: ${self:service}-sessions-${self:provider.stage}
    CONNECTIONS_TABLE: ${self:service}-connections-${self:provider.stage}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt SessionsTable.Arn
        - !GetAtt ConnectionsTable.Arn
        - !Sub "${ConnectionsTable.Arn}/index/*"

# Cost-optimized Lambda functions (128MB memory for lowest cost)
functions:
  websocketConnect:
    handler: serverless/websocket.connect
    memorySize: 128
    events:
      - websocket: $connect
      
  websocketDisconnect:
    handler: serverless/websocket.disconnect
    memorySize: 128
    events:
      - websocket: $disconnect
      
  joinSession:
    handler: serverless/game.joinSession
    memorySize: 128
    events:
      - websocket:
          route: joinSession
          
  castVote:
    handler: serverless/game.castVote
    memorySize: 128
    events:
      - websocket:
          route: castVote
          
  resetVotes:
    handler: serverless/game.resetVotes
    memorySize: 128
    events:
      - websocket:
          route: resetVotes

  createSession:
    handler: serverless/api.createSession
    memorySize: 128
    events:
      - http:
          path: /api/sessions
          method: post
          cors: true
          
  healthCheck:
    handler: serverless/api.healthCheck
    memorySize: 128
    events:
      - http:
          path: /api/health
          method: get
          cors: true

# Cost-optimized DynamoDB tables (pay-per-request + TTL auto-cleanup)
resources:
  Resources:
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SESSIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: sessionCode
            AttributeType: S
        KeySchema:
          - AttributeName: sessionCode
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
          
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: sessionCode
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SessionIndex
            KeySchema:
              - AttributeName: sessionCode
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
