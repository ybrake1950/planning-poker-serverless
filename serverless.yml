# Corrected serverless.yml (Fixed Outputs section)
# File: serverless.yml (replace your existing file)

service: planning-poker-serverless

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  
  # Environment variables
  environment:
    SESSIONS_TABLE: ${self:service}-sessions-${self:provider.stage}
    CONNECTIONS_TABLE: ${self:service}-connections-${self:provider.stage}
    CORS_ORIGIN: ${env:CORS_ORIGIN, 'https://team2playscards.com'}
    FRONTEND_URL: ${env:FRONTEND_URL, 'https://team2playscards.com'}
    NODE_ENV: ${self:provider.stage}
  
  # IAM permissions for Lambda functions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSIONS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSIONS_TABLE}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}/index/*"
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"

# Lambda Functions
functions:
  # WebSocket connection handlers
  websocketConnect:
    handler: serverless/websocket.connect
    events:
      - websocket: $connect
      
  websocketDisconnect:
    handler: serverless/websocket.disconnect  
    events:
      - websocket: $disconnect
      
  # Game logic handlers
  joinSession:
    handler: serverless/game.joinSession
    events:
      - websocket:
          route: joinSession
          
  castVote:
    handler: serverless/game.castVote
    events:
      - websocket:
          route: castVote
          
  resetVotes:
    handler: serverless/game.resetVotes
    events:
      - websocket:
          route: resetVotes

  # HTTP API handlers  
  createSession:
    handler: serverless/api.createSession
    events:
      - http:
          path: /api/sessions
          method: post
          cors:
            origin: 'https://team2playscards.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          
  getSession:
    handler: serverless/api.getSession
    events:
      - http:
          path: /api/sessions/{sessionCode}
          method: get
          cors:
            origin: 'https://team2playscards.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          
  healthCheck:
    handler: serverless/api.healthCheck
    events:
      - http:
          path: /api/health
          method: get
          cors:
            origin: 'https://team2playscards.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

# DynamoDB Tables and CloudWatch Resources
resources:
  Resources:
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SESSIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        AttributeDefinitions:
          - AttributeName: sessionCode
            AttributeType: S
        KeySchema:
          - AttributeName: sessionCode
            KeyType: HASH
        
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: sessionCode
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SessionIndex
            KeySchema:
              - AttributeName: sessionCode
                KeyType: HASH
            Projection:
              ProjectionType: ALL

  # Fixed: Outputs section moved inside resources
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId

    WebSocketApiId:
      Value:
        Ref: WebsocketsApi
      Export:
        Name: ${self:service}-${self:provider.stage}-websocketApiId